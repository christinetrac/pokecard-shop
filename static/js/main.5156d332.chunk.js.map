{"version":3,"sources":["components/common/choose.gif","pokeball.gif","components/pokemon.js","components/common/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokemon","pokemon","this","props","icon","id","class","style","width","src","alt","name","types","map","type","abilities","ability","stats","stat","base_stat","Component","spinner","height","margin","display","App","state","loading","Math","floor","random","setState","fetch","then","res","json","data","setTimeout","catch","console","log","showPokemon","pokeball","onClick","window","location","reload","showSpinner","Spinner","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,4LCuC5BC,E,iLAnCX,IAAMC,EAAUC,KAAKC,MAAMF,QACrBG,EAAO,4EAA8EH,EAAQI,GAAK,OACpG,OACI,6BACI,yBAAKC,MAAQ,OAAOC,MAAO,CAACC,MAAO,UAC/B,yBAAKC,IAAKL,EAAME,MAAM,eAAeI,IAAKT,EAAQU,OAClD,wBAAIL,MAAQ,cAAa,oCAAUL,EAAQI,GAAlB,IAAuBJ,EAAQU,OACxD,yBAAKL,MAAO,aACR,wBAAIA,MAAM,cACN,wBAAIA,MAAM,mBACV,wCACCL,EAAQW,OAASX,EAAQW,MAAMC,KAAI,SAACC,GAAD,OAChC,0BAAMR,MAAM,iCAAiCQ,EAAKA,KAAKH,KAAvD,SAIJ,wBAAIL,MAAM,mBACV,2CACCL,EAAQc,WAAad,EAAQc,UAAUF,KAAI,SAACG,GAAD,OACxC,0BAAMV,MAAM,iCAAiCU,EAAQA,QAAQL,KAA7D,UAGH,6BACL,wBAAIL,MAAM,cACLL,EAAQgB,OAAShB,EAAQgB,MAAMJ,KAAI,SAACK,GAAD,OAChC,wBAAIZ,MAAM,mBAAmBY,EAAKA,KAAKP,KAAvC,KAA8C,0BAAML,MAAM,iCAAiCY,EAAKC,uB,GA3B1GC,a,wBCCP,aACb,OACE,6BACE,yBAAKd,MAAQ,UACXG,IAAKY,IACLd,MAAO,CAAEe,OAAQ,OAAQC,OAAQ,OAAQC,QAAS,SAClDd,IAAI,oB,gBCkDGe,E,YApDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXzB,QAAS,GACT0B,SAAS,GAJA,E,iFAQQ,IAAD,OACdtB,EAAKuB,KAAKC,MAAsB,IAAhBD,KAAKE,UACzB5B,KAAK6B,SAAS,CAACJ,SAAS,IACxBK,MAAM,qCAAuC3B,GAC5C4B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKL,SAAS,CACZ9B,QAASmC,IAEXC,YAAW,WACT,EAAKN,SAAS,CAACJ,SAAQ,MACtB,SAEJW,MAAMC,QAAQC,O,+BAIf,IAAMb,EAAUzB,KAAKwB,MAAMC,QAM3B,IAAMc,EACJ,6BACE,2BAAO3B,KAAK,QAAQL,IAAKiC,IAAUC,QANvC,WACEC,OAAOC,SAASC,UAKuCxC,MAAM,aAC3D,yBAAKA,MAAM,YACT,kBAAC,EAAD,CAASL,QAAWC,KAAKwB,MAAMzB,YAK/B8C,EACJ,6BACE,kBAACC,EAAD,OAIJ,OACE,6BAAMrB,EAAUoB,EAAaN,O,GAhDjBrB,aCME6B,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.5156d332.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/choose.84c5b716.gif\";","module.exports = __webpack_public_path__ + \"static/media/pokeball.e78d3c28.gif\";","import React, { Component } from 'react'\n\nclass Pokemon extends Component {\n    render() {\n    const pokemon = this.props.pokemon;\n    const icon = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' + pokemon.id + '.png';\n        return (\n            <div>\n                <div class = \"card\" style={{width: 24 + 'rem'}}>\n                    <img src={icon} class=\"card-img-top\" alt={pokemon.name}/>\n                    <h2 class = \"card-title\"><center>#{pokemon.id} {pokemon.name}</center></h2>\n                    <div class =\"card-body\">\n                        <ul class=\"list-group\">\n                            <li class=\"list-group-item\">\n                            <span>type: </span>\n                            {pokemon.types && pokemon.types.map((type)  => (\n                                <span class=\"card-subtitle mb-2 text-muted\">{type.type.name} </span>\n                            ))}\n                            </li>\n                            \n                            <li class=\"list-group-item\">\n                            <span>ability: </span>\n                            {pokemon.abilities && pokemon.abilities.map((ability)  => (\n                                <span class=\"card-subtitle mb-2 text-muted\">{ability.ability.name} </span>\n                            ))}\n                            </li>\n                        </ul><br/>\n                        <ul class=\"list-group\">\n                            {pokemon.stats && pokemon.stats.map((stat) => (\n                                <li class=\"list-group-item\">{stat.stat.name}: <span class=\"card-subtitle mb-2 text-muted\">{stat.base_stat}</span></li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Pokemon","import React from 'react';\nimport spinner from './choose.gif';\n\nexport default () => {\n  return (\n    <div>\n      <img class = \"spinner\"\n        src={spinner}\n        style={{ height: '155%', margin: 'auto', display: 'block' }}\n        alt=\"I Choose You!\"\n      />\n    </div>\n  );\n};","import React, {Component} from 'react';\nimport Pokemon from './components/pokemon';\nimport './App.css';\nimport Spinner from './components/common/Spinner';\nimport pokeball from './pokeball.gif';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      pokemon: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    let id = Math.floor(Math.random() * 807)\n    this.setState({loading: true})\n    fetch('https://pokeapi.co/api/v2/pokemon/' + id)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({\n        pokemon: data,\n      })\n      setTimeout(() => { \n        this.setState({loading:false})\n      }, 1550);\n    })\n    .catch(console.log)\n  }\n\n  render(){\n    const loading = this.state.loading;\n\n    function refresh() {\n      window.location.reload();\n    }\n\n    const showPokemon = (\n      <div>\n        <input type=\"image\" src={pokeball} onClick={refresh} class=\"pokeball\"/>\n        <div class=\"Pokecard\">\n          <Pokemon pokemon = {this.state.pokemon}/>\n        </div>\n      </div>\n    );\n\n    const showSpinner = (\n      <div>\n        <Spinner/>\n      </div>\n    );\n\n    return (\n      <div>{loading ? showSpinner: showPokemon}</div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}